package twitter

import (
	"fmt"
	"io"
	"net/http"
	"time"
)

func (u User) GetTimeline(replies bool) {
	endpoint := "https://api.twitter.com/2/timeline/profile/" + u.restId + ".json"
	req, _ := http.NewRequest("GET", endpoint, nil)
	req.Header = headers(u.client.token)
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		panic(err)
	}
	b, _ := io.ReadAll(resp.Body)
	fmt.Println(string(b))
}

type Tweet struct {
	CreatedAt time.Time
	Id        string
	Text      string
	//	Attachments       Attachments
	AuthorId       string
	ConversationId string
	Entities       Entities
	//	Geo               Geo
	InReplyToUserId   string
	Lang              string
	PossiblySensitive bool
	//	PublicMetrics     PublicMetrics
	//	ReferencedTweets  []Reference
	Source string
}

func ParseTimeline(r io.Reader) {
	type AutoGenerated struct {
		CreatedAt string   `json:"created_at"`
		ID        int64    `json:"id"`
		IDStr     string   `json:"id_str"`
		Text      string   `json:"text"`
		Truncated bool     `json:"truncated"`
		Entities  Entities `json:"entities"`
		//		ExtendedEntities          ExtendedEntities `json:"extended_entities"`
		Source                    string      `json:"source"`
		InReplyToStatusID         int64       `json:"in_reply_to_status_id"`
		InReplyToStatusIDStr      string      `json:"in_reply_to_status_id_str"`
		InReplyToUserID           int         `json:"in_reply_to_user_id"`
		InReplyToUserIDStr        string      `json:"in_reply_to_user_id_str"`
		InReplyToScreenName       string      `json:"in_reply_to_screen_name"`
		UserID                    int         `json:"user_id"`
		UserIDStr                 string      `json:"user_id_str"`
		Geo                       interface{} `json:"geo"`
		Coordinates               interface{} `json:"coordinates"`
		Place                     interface{} `json:"place"`
		Contributors              interface{} `json:"contributors"`
		IsQuoteStatus             bool        `json:"is_quote_status"`
		RetweetCount              int         `json:"retweet_count"`
		FavoriteCount             int         `json:"favorite_count"`
		ConversationID            int64       `json:"conversation_id"`
		ConversationIDStr         string      `json:"conversation_id_str"`
		Favorited                 bool        `json:"favorited"`
		Retweeted                 bool        `json:"retweeted"`
		PossiblySensitive         bool        `json:"possibly_sensitive"`
		PossiblySensitiveEditable bool        `json:"possibly_sensitive_editable"`
		Lang                      string      `json:"lang"`
		SupplementalLanguage      interface{} `json:"supplemental_language"`
		//		SelfThread                SelfThread       `json:"self_thread"`
	}
	type FocusRects struct {
		X int `json:"x"`
		Y int `json:"y"`
		H int `json:"h"`
		W int `json:"w"`
	}
	type OriginalInfo struct {
		Width      int          `json:"width"`
		Height     int          `json:"height"`
		FocusRects []FocusRects `json:"focus_rects"`
	}
	type Large struct {
		W      int    `json:"w"`
		H      int    `json:"h"`
		Resize string `json:"resize"`
	}
	type Small struct {
		W      int    `json:"w"`
		H      int    `json:"h"`
		Resize string `json:"resize"`
	}
	type Thumb struct {
		W      int    `json:"w"`
		H      int    `json:"h"`
		Resize string `json:"resize"`
	}
	type Medium struct {
		W      int    `json:"w"`
		H      int    `json:"h"`
		Resize string `json:"resize"`
	}
	type Sizes struct {
		Large  Large  `json:"large"`
		Small  Small  `json:"small"`
		Thumb  Thumb  `json:"thumb"`
		Medium Medium `json:"medium"`
	}
	type Media struct {
		ID            int64        `json:"id"`
		IDStr         string       `json:"id_str"`
		Indices       []int        `json:"indices"`
		MediaURL      string       `json:"media_url"`
		MediaURLHTTPS string       `json:"media_url_https"`
		URL           string       `json:"url"`
		DisplayURL    string       `json:"display_url"`
		ExpandedURL   string       `json:"expanded_url"`
		Type          string       `json:"type"`
		OriginalInfo  OriginalInfo `json:"original_info"`
		Sizes         Sizes        `json:"sizes"`
		MediaKey      string       `json:"media_key"`
	}
	type Entities struct {
		Hashtags     []interface{} `json:"hashtags"`
		Symbols      []interface{} `json:"symbols"`
		UserMentions []interface{} `json:"user_mentions"`
		Urls         []interface{} `json:"urls"`
		Media        []Media       `json:"media"`
	}
	type ExtendedEntities struct {
		Media []Media `json:"media"`
	}
	type SelfThread struct {
		ID    int64  `json:"id"`
		IDStr string `json:"id_str"`
	}
}
